# ===============================================
# 🔗 AcuityBookmarks Chrome扩展专用CI/CD管道
# ===============================================
# 
# 🎯 专门设计目标：
#   专为Chrome扩展项目优化的CI/CD流程
#   主要关注前端构建、扩展验证和Chrome Web Store发布
# 
# 📋 核心功能：
#   ✅ Vue 3 + TypeScript Chrome扩展构建
#   ✅ Chrome扩展结构和大小验证
#   ✅ Manifest V3规范检查
#   ✅ 自动发布到Chrome Web Store
#   ✅ 后端开发服务器支持 (可选)
# 
# 🔧 技术特点：
#   - 针对Chrome扩展生态系统优化
#   - 完整的扩展包验证流程
#   - Chrome Web Store API集成
#   - 开发和生产环境分离
# 
# 💡 适用场景：
#   - 纯Chrome扩展项目
#   - 需要Chrome Web Store自动发布
#   - 注重扩展质量和用户体验
# ===============================================

name: 🔗 Chrome Extension Specialized CI/CD

# 🚀 工作流触发事件：代码变更时自动执行
on:
  push:
    branches: [main, develop]  # 推送到主分支或开发分支时触发
  pull_request:
    branches: [main]  # 创建指向main分支的PR时触发

# 🌍 全局环境变量：整个工作流中的统一配置
env:
  BUN_VERSION: "latest"    # Bun包管理器版本 (高性能JS运行时)
  NODE_VERSION: "20.x"     # Node.js版本 (备用兼容性支持)

jobs:
  # ===============================
  # 🔍 代码质量检查
  # ===============================
  quality-gate:
    name: 🔍 Chrome Extension Quality Gate & Security Audit
    runs-on: ubuntu-latest  # 使用GitHub托管的Ubuntu运行器
    
    steps:
      # 📥 获取源代码：检出完整的项目代码库
      - name: 📥 Checkout Project Repository
        uses: actions/checkout@v4  # 使用GitHub Actions最新版本
        
      # 🔧 配置构建环境：设置高性能的Bun运行时
      - name: 🔧 Setup Bun Runtime Environment
        uses: oven-sh/setup-bun@v1  # 官方Bun安装Action
        with:
          bun-version: ${{ env.BUN_VERSION }}  # 使用全局定义的版本
          
      # 📦 安装Chrome扩展依赖：Vue 3 + TypeScript生态系统
      - name: 📦 Install Chrome Extension Dependencies
        run: |
          echo "📦 Installing Chrome Extension build dependencies..."
          cd frontend
          # frozen-lockfile: 确保CI环境与开发环境依赖版本完全一致
          # 避免因依赖版本变化导致的构建差异
          bun install --frozen-lockfile
          echo "✅ Chrome Extension dependencies installed"
          
      # 📦 安装后端开发支持依赖 (可选)
      - name: 📦 Install Backend Development Support (Optional)
        run: |
          echo "📦 Installing backend development support dependencies..."
          cd backend
          # 后端主要用于本地开发时的AI LLM测试和数据处理
          # 在CI中主要用于代码质量检查
          bun install --frozen-lockfile
          echo "✅ Backend support dependencies installed"
          
      # 🔐 前端安全漏洞扫描：Chrome扩展特有的安全检查
      - name: 🔐 Chrome Extension Security Audit
        run: |
          echo "🔍 Running Chrome Extension security vulnerability scan..."
          cd frontend
          # moderate级别：检查中等及以上严重性的安全漏洞
          # 特别关注：DOM操作、内容脚本、跨站脚本等Chrome扩展相关风险
          bun audit --audit-level moderate
          echo "✅ Chrome Extension security audit passed"
          
      # 🔐 后端安全审计：开发支持服务的安全性
      - name: 🔐 Backend Development Support Security Audit
        run: |
          echo "🔍 Running backend development support security audit..."
          cd backend
          # 检查AI LLM集成、网络请求处理等相关的安全风险
          bun audit --audit-level moderate
          echo "✅ Backend security audit completed"
          
      # 📝 TypeScript类型安全检查：确保Chrome扩展代码的类型正确性
      - name: 📝 TypeScript Type Safety Validation
        run: |
          echo "📝 Running TypeScript type safety check for Chrome Extension..."
          cd frontend
          # Vue 3 + TypeScript + Chrome Extension APIs的类型检查
          # 确保Chrome APIs调用、组件props、store状态等类型正确
          bun run type-check
          echo "✅ TypeScript type safety validation passed"
          
      # 🧹 前端代码质量检查：Chrome扩展最佳实践验证
      - name: 🧹 Chrome Extension Code Quality Check
        run: |
          echo "🧹 Running Chrome Extension code quality and best practices check..."
          cd frontend
          # ESLint规则包括：
          # - Vue 3组件编写规范
          # - Chrome Extension API使用最佳实践
          # - TypeScript代码风格和安全性
          # - 性能优化建议
          bun run lint:check
          echo "✅ Chrome Extension code quality check passed"
          
      # 🧹 后端代码质量检查：开发支持服务的代码规范
      - name: 🧹 Backend Development Support Code Quality  
        run: |
          echo "🧹 Running backend code quality check for development support..."
          cd backend
          # 检查Bun/Node.js代码质量：
          # - AI LLM集成代码规范
          # - 网络请求处理最佳实践
          # - 错误处理和日志记录
          # - API设计和安全性
          bun run lint:check
          echo "✅ Backend code quality check passed"

  # ===============================
  # 🔨 构建验证与分析
  # ===============================
  build-validation:
    name: 🔨 Build & Chrome Extension Validation
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend
          bun install --frozen-lockfile
          
      - name: 🔨 Build Chrome Extension (Production)
        run: |
          cd frontend
          echo "🔨 Building Chrome Extension for production..."
          bun run build:prod
          
      - name: 📊 Bundle Size Analysis
        run: |
          echo "📊 Analyzing bundle size..."
          cd dist
          
          # 显示文件大小分布
          echo "📦 Extension files size distribution:"
          find . -type f -exec ls -lah {} \; | awk '{print $5 "\t" $9}' | sort -hr
          
          # 计算总大小
          TOTAL_SIZE_KB=$(du -sk . | cut -f1)
          TOTAL_SIZE_MB=$((TOTAL_SIZE_KB / 1024))
          
          echo "📦 Total extension size: ${TOTAL_SIZE_KB}KB (${TOTAL_SIZE_MB}MB)"
          
          # Chrome扩展大小限制检查 (通常建议<10MB，警告>5MB)
          if [ $TOTAL_SIZE_KB -gt 10240 ]; then
            echo "❌ Extension size exceeds 10MB limit!"
            exit 1
          elif [ $TOTAL_SIZE_KB -gt 5120 ]; then
            echo "⚠️ Extension size exceeds 5MB (recommended limit)"
          else
            echo "✅ Extension size within recommended limits"
          fi
          
      - name: 🏪 Chrome Extension Structure Validation
        run: |
          cd dist
          echo "🏪 Validating Chrome Extension structure..."
          
          # 检查必需文件
          echo "📋 Checking required files..."
          required_files=("manifest.json" "background.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # 检查HTML页面文件
          html_files=("popup.html" "management.html" "side-panel.html")
          for file in "${html_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found HTML page: $file"
            else
              echo "⚠️ Optional HTML page missing: $file"
            fi
          done
          
          # 验证manifest.json格式和内容
          echo "📝 Validating manifest.json..."
          if command -v jq > /dev/null; then
            # JSON格式检查
            if ! jq empty manifest.json; then
              echo "❌ Invalid manifest.json format"
              exit 1
            fi
            
            # 检查关键字段
            VERSION=$(jq -r '.version' manifest.json)
            NAME=$(jq -r '.name' manifest.json)
            MANIFEST_VERSION=$(jq -r '.manifest_version' manifest.json)
            
            echo "📋 Extension Info:"
            echo "  - Name: $NAME"
            echo "  - Version: $VERSION" 
            echo "  - Manifest Version: $MANIFEST_VERSION"
            
            # 检查manifest版本
            if [ "$MANIFEST_VERSION" != "3" ]; then
              echo "⚠️ Manifest v3 recommended for new extensions"
            fi
            
            echo "✅ manifest.json structure is valid"
          else
            echo "⚠️ jq not available, skipping detailed manifest validation"
          fi
          
          # 检查图标文件
          echo "🖼️ Checking icon files..."
          if [ -d "images" ]; then
            icon_files=$(find images -name "icon*.png" | wc -l)
            echo "✅ Found $icon_files icon files"
          else
            echo "⚠️ Icons directory not found"
          fi
          
      - name: 🧪 Extension Load Test (Manifest Validation)
        run: |
          echo "🧪 Testing extension manifest validity..."
          cd dist
          
          # 模拟Chrome扩展加载验证
          if [ -f "manifest.json" ]; then
            # 检查manifest中的文件引用是否都存在
            echo "🔍 Checking file references in manifest..."
            
            # 提取并检查background script
            if command -v jq > /dev/null; then
              BACKGROUND_SCRIPT=$(jq -r '.background.service_worker // .background.scripts[0] // empty' manifest.json)
              if [ ! -z "$BACKGROUND_SCRIPT" ] && [ "$BACKGROUND_SCRIPT" != "null" ]; then
                if [ -f "$BACKGROUND_SCRIPT" ]; then
                  echo "✅ Background script found: $BACKGROUND_SCRIPT"
                else
                  echo "❌ Background script missing: $BACKGROUND_SCRIPT"
                  exit 1
                fi
              fi
            fi
            
            echo "✅ Extension structure validation passed"
          fi
          
      - name: 📤 Upload Extension Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-build-${{ github.sha }}
          path: dist/
          retention-days: 30

  # ===============================
  # ⚡ 性能与质量测试
  # ===============================
  performance-check:
    name: ⚡ Performance & Quality Check
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend && bun install --frozen-lockfile
          cd ../backend && bun install --frozen-lockfile
          
      - name: 🚀 Backend Development Server Test
        run: |
          echo "🚀 Testing backend development server..."
          cd backend
          
          # 启动后端服务器（用于开发辅助）
          bun run start &
          SERVER_PID=$!
          
          # 等待服务器启动
          sleep 3
          
          # 健康检查
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Backend server is running correctly"
          else
            echo "⚠️ Backend server not responding (this is OK for extension-only mode)"
          fi
          
          # 清理进程
          kill $SERVER_PID 2>/dev/null || true
          
      - name: 📊 Build Size Analysis Report
        run: |
          echo "📊 Generating build analysis report..."
          cd frontend
          
          # 生成构建分析（如果支持）
          if grep -q "build:analyze" package.json; then
            echo "🔍 Running build analysis..."
            bun run build:analyze
          fi
          
          echo "✅ Performance check completed"

  # ===============================
  # 🚀 自动化部署 (仅main分支)
  # ===============================
  deploy:
    name: 🚀 Chrome Extension Deployment
    needs: [quality-gate, build-validation, performance-check]
    runs-on: ubuntu-latest
    # 仅在推送到main分支时部署
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend
          bun install --frozen-lockfile
          
      - name: 🔨 Build for Chrome Web Store
        run: |
          cd frontend
          echo "🔨 Building for Chrome Web Store release..."
          NODE_ENV=production bun run build:prod
          
      - name: 📦 Create Extension Package
        run: |
          echo "📦 Creating extension package..."
          cd dist
          
          # 创建时间戳版本的zip包
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ZIP_NAME="acuity-bookmarks-v${GITHUB_RUN_NUMBER}-${TIMESTAMP}.zip"
          
          # 打包扩展
          zip -r "../${ZIP_NAME}" . -x "*.DS_Store" "*.gitkeep"
          
          echo "✅ Extension package created: $ZIP_NAME"
          echo "ZIP_FILE=${ZIP_NAME}" >> $GITHUB_ENV
          
      - name: 🏪 Deploy to Chrome Web Store
        # 仅在配置了Chrome Web Store密钥时运行
        if: ${{ secrets.CHROME_CLIENT_ID && secrets.CHROME_CLIENT_SECRET }}
        uses: mobilefirstllc/cws-publish@latest
        with:
          action: 'publish'
          client_id: ${{ secrets.CHROME_CLIENT_ID }}
          client_secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh_token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          extension_id: ${{ secrets.CHROME_EXTENSION_ID }}
          zip_file: './${{ env.ZIP_FILE }}'
          
      - name: 📝 Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: 🚀 AcuityBookmarks v${{ github.run_number }}
          body: |
            ## 🚀 AcuityBookmarks Chrome Extension Release
            
            ### 📦 Release Information
            - **Version**: v${{ github.run_number }}
            - **Commit**: ${{ github.sha }}
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Author**: ${{ github.event.head_commit.author.name }}
            
            ### 🔧 Technical Details
            - **Framework**: Vue 3 + TypeScript + IndexedDB
            - **Build Tool**: Vite + Bun
            - **Architecture**: Chrome Extension Manifest V3
            
            ### 📋 Recent Changes
            ${{ github.event.head_commit.message }}
            
            ### 🚀 Installation
            1. Download the `acuity-bookmarks-*.zip` file
            2. Extract to a local directory
            3. Open Chrome Extensions (`chrome://extensions/`)
            4. Enable "Developer mode"
            5. Click "Load unpacked" and select the extracted folder
            
          files: ${{ env.ZIP_FILE }}
          draft: false
          prerelease: false

  # ===============================
  # 📢 状态通知
  # ===============================
  notification:
    name: 📢 Build Status Notification
    needs: [quality-gate, build-validation, performance-check, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📊 Build Summary
        run: |
          echo "📊 Build Summary for commit ${{ github.sha }}"
          echo "================================="
          
          echo "🔍 Quality Gate: ${{ needs.quality-gate.result }}"
          echo "🔨 Build Validation: ${{ needs.build-validation.result }}"
          echo "⚡ Performance Check: ${{ needs.performance-check.result }}"
          
          if [ "${{ needs.deploy.result }}" != "skipped" ]; then
            echo "🚀 Deployment: ${{ needs.deploy.result }}"
          else
            echo "🚀 Deployment: Skipped (not main branch)"
          fi
          
          # 总体状态判断
          if [ "${{ needs.quality-gate.result }}" == "success" ] && \
             [ "${{ needs.build-validation.result }}" == "success" ] && \
             [ "${{ needs.performance-check.result }}" == "success" ]; then
            echo "✅ Overall Status: SUCCESS"
            echo "🎉 Chrome Extension is ready for use!"
          else
            echo "❌ Overall Status: FAILED"
            echo "🔧 Please check the failed steps above"
            exit 1
          fi
