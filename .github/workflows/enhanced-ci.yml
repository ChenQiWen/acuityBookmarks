name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  BUN_VERSION: "latest"
  NODE_VERSION: "20.x"

jobs:
  # 代码质量检查
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend
          bun install --frozen-lockfile
          
      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          bun install --frozen-lockfile
          
      - name: 🔐 Security Audit
        run: |
          echo "🔍 Running security audit..."
          cd frontend && bun audit --audit-level moderate
          cd ../backend && bun audit --audit-level moderate
          
      - name: 📝 TypeScript Check
        run: |
          cd frontend
          bun run type-check
          
      # - name: 🧹 Lint Check
      #   run: |
      #     cd frontend
      #     bun run lint

  # 多维度测试矩阵
  test-matrix:
    name: 🧪 Test Suite (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, api]
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend && bun install --frozen-lockfile
          cd ../backend && bun install --frozen-lockfile
          
      - name: 🧪 Run ${{ matrix.test-type }} Tests (Frontend)
        run: |
          cd frontend
          bun run test:${{ matrix.test-type }}
          
      - name: 🧪 Run ${{ matrix.test-type }} Tests (Backend)
        run: |
          cd backend
          bun run test:${{ matrix.test-type }}
          
      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info,./backend/coverage/lcov.info
          fail_ci_if_error: false
          name: coverage-${{ matrix.test-type }}

  # 构建和包大小分析
  build-analysis:
    name: 🔨 Build & Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend && bun install --frozen-lockfile
          
      - name: 🔨 Build Production
        run: |
          cd frontend
          bun run build:prod
          
      - name: 📊 Analyze Bundle Size
        run: |
          cd frontend
          echo "📦 Bundle size analysis:"
          du -sh ../dist/* | sort -hr
          
          # 检查总包大小 (目标: <1MB)
          TOTAL_SIZE=$(du -s ../dist | cut -f1)
          echo "Total bundle size: ${TOTAL_SIZE}KB"
          
          if [ $TOTAL_SIZE -gt 1024 ]; then
            echo "⚠️ Bundle size exceeds 1MB target"
          else
            echo "✅ Bundle size within target"
          fi
          
      - name: 🏪 Validate Extension Package
        run: |
          cd dist
          
          # 检查必需文件
          echo "🔍 Checking required files..."
          test -f manifest.json || { echo "❌ manifest.json missing"; exit 1; }
          test -f background.js || { echo "❌ background.js missing"; exit 1; }
          test -d assets || { echo "❌ assets directory missing"; exit 1; }
          
          # 验证manifest.json格式
          echo "✅ Validating manifest.json..."
          if command -v jq > /dev/null; then
            jq empty manifest.json || { echo "❌ Invalid manifest.json"; exit 1; }
            echo "✅ manifest.json is valid"
          fi
          
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-build
          path: dist/
          retention-days: 7

  # 性能基准测试
  performance-benchmark:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend && bun install --frozen-lockfile
          cd ../backend && bun install --frozen-lockfile
          
      - name: ⚡ Run Performance Tests
        run: |
          echo "🚀 Starting backend server..."
          cd backend && bun run start &
          SERVER_PID=$!
          
          # 等待服务器启动
          sleep 5
          
          echo "📊 Running performance benchmarks..."
          # 这里可以添加具体的性能测试
          curl -f http://localhost:3000/health || echo "Server not ready"
          
          # 清理
          kill $SERVER_PID || true

  # 自动化部署
  deploy:
    name: 🚀 Deploy
    needs: [quality-gate, test-matrix, build-analysis]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          cd frontend && bun install --frozen-lockfile
          
      - name: 🔨 Build for Production
        run: |
          cd frontend
          NODE_ENV=production bun run build:prod
          
      - name: 📦 Create Extension Package
        run: |
          cd dist
          zip -r ../acuity-bookmarks-${{ github.sha }}.zip .
          
      - name: 🏪 Deploy to Chrome Web Store
        # 只有在有相关密钥时才运行
        if: ${{ secrets.CHROME_CLIENT_ID && secrets.CHROME_CLIENT_SECRET }}
        uses: mobilefirstllc/cws-publish@latest
        with:
          action: 'publish'
          client_id: ${{ secrets.CHROME_CLIENT_ID }}
          client_secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh_token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          extension_id: ${{ secrets.CHROME_EXTENSION_ID }}
          zip_file: './acuity-bookmarks-${{ github.sha }}.zip'
          
      - name: 📝 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 🚀 AcuityBookmarks Release v${{ github.run_number }}
            
            ### 📦 Build Info
            - **Commit**: ${{ github.sha }}
            - **Date**: ${{ github.event.head_commit.timestamp }}
            - **Author**: ${{ github.event.head_commit.author.name }}
            
            ### 📊 Build Metrics
            - **Bundle Size**: Generated during build
            - **Test Coverage**: Available in CI logs
            - **Performance**: Benchmarked ✅
            
            ### 📋 Changes
            ${{ github.event.head_commit.message }}
            
          draft: false
          prerelease: false

  # 通知
  notification:
    name: 📢 Notify
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📢 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed or skipped"
          fi
