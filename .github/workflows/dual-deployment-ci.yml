# ===============================================
# 🚀 AcuityBookmarks 双端部署CI/CD管道
# ===============================================
# 
# 🎯 项目架构：
#   前端：Vue 3 Chrome扩展 → Chrome Web Store
#   后端：Bun服务器 (AI LLM + 抓包) → Vercel Serverless
# 
# 📋 核心功能：
#   ✅ 前端Chrome扩展自动构建和发布
#   ✅ 后端Serverless API自动部署  
#   ✅ 双端同步版本管理
#   ✅ 完整的质量保证流程
# 
# 🔧 技术栈：
#   - Bun (包管理器和构建工具)
#   - Vue 3 + TypeScript + IndexedDB
#   - Vercel Serverless Functions
#   - GitHub Actions CI/CD
# 
# 💡 优势：
#   - 针对双端架构专门优化
#   - Chrome扩展特有验证
#   - Serverless部署支持
#   - 完整的监控和报告
# ===============================================

name: 🚀 Dual Deployment CI/CD (Chrome Extension + Serverless)

# 🚀 触发条件：代码推送和拉取请求
on:
  push:
    branches: [main, develop]  # 推送到主分支或开发分支时触发
  pull_request:
    branches: [main]  # 创建到main分支的PR时触发

# 🌍 全局环境变量：统一版本管理
env:
  BUN_VERSION: "latest"    # Bun运行时版本 (快速包管理)
  NODE_VERSION: "20.x"     # Node.js版本 (Vercel兼容性)

jobs:
  # ===============================
  # 🔍 代码质量检查 (前后端)
  # ===============================
  quality-gate:
    name: 🔍 Quality Gate & Security Audit
    runs-on: ubuntu-latest  # 使用Ubuntu最新版本的GitHub托管运行器
    
    steps:
      # 📥 检出源代码：获取完整的项目代码库
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4  # 使用最新的checkout action
        
      # 🔧 设置Bun运行时：高性能JavaScript运行时和包管理器
      - name: 🔧 Setup Bun Runtime Environment
        uses: oven-sh/setup-bun@v1  # 官方Bun设置action
        with:
          bun-version: ${{ env.BUN_VERSION }}  # 使用全局定义的Bun版本
          
      # 📦 安装前端依赖：Vue 3 Chrome扩展相关包
      - name: 📦 Install Frontend Dependencies (Chrome Extension)
        run: |
          echo "📦 Installing frontend dependencies for Chrome Extension..."
          cd frontend
          # 使用frozen-lockfile确保版本一致性，避免依赖版本漂移
          bun install --frozen-lockfile
          echo "✅ Frontend dependencies installed successfully"
          
      # 📦 安装后端依赖：Serverless API相关包
      - name: 📦 Install Backend Dependencies (Serverless API)  
        run: |
          echo "📦 Installing backend dependencies for Serverless functions..."
          cd backend
          # 同样使用frozen-lockfile保证依赖版本一致性
          bun install --frozen-lockfile
          echo "✅ Backend dependencies installed successfully"
          
      # 🔐 前端安全审计：检查已知安全漏洞
      - name: 🔐 Security Audit - Frontend (Chrome Extension)
        run: |
          echo "🔍 Running security audit for Chrome Extension..."
          cd frontend
          # moderate级别：检查中等及以上严重性的安全漏洞
          bun audit --audit-level moderate
          echo "✅ Frontend security audit completed"
          
      # 🔐 后端安全审计：检查Serverless API的安全性
      - name: 🔐 Security Audit - Backend (Serverless API)
        run: |
          echo "🔍 Running security audit for Serverless backend..."
          cd backend
          # 检查后端依赖的安全漏洞，特别关注AI LLM和网络请求相关包
          bun audit --audit-level moderate
          echo "✅ Backend security audit completed"
          
      # 📝 TypeScript类型检查：确保前端代码类型安全
      - name: 📝 TypeScript Type Safety Check
        run: |
          echo "📝 Running TypeScript type checking for Chrome Extension..."
          cd frontend
          # Vue 3 + TypeScript项目的类型检查
          bun run type-check
          echo "✅ TypeScript type checking passed"
          
      # 🧹 前端代码质量检查：ESLint规则验证
      - name: 🧹 Code Quality Check - Frontend (ESLint)
        run: |
          echo "🧹 Running ESLint code quality check for frontend..."
          cd frontend
          # 检查Vue 3组件、TypeScript代码规范和最佳实践
          bun run lint:check
          echo "✅ Frontend code quality check passed"
          
      # 🧹 后端代码质量检查：确保API代码质量
      - name: 🧹 Code Quality Check - Backend (ESLint)
        run: |
          echo "🧹 Running ESLint code quality check for backend..."
          cd backend
          # 检查Bun/Node.js服务器代码，AI集成和网络处理逻辑
          bun run lint:check
          echo "✅ Backend code quality check passed"

  # ===============================
  # 🔨 Chrome扩展构建验证
  # ===============================
  chrome-extension-build:
    name: 🔨 Chrome Extension Build & Validation
    runs-on: ubuntu-latest  # 使用GitHub托管的Ubuntu运行器
    needs: quality-gate  # 依赖质量检查任务完成
    
    steps:
      # 📥 检出代码：获取最新的源代码
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      # 🔧 设置Bun环境：Chrome扩展构建所需的运行时
      - name: 🔧 Setup Bun Runtime Environment
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}  # 使用全局定义的Bun版本
          
      # 📦 安装前端依赖：Vue 3 + TypeScript + Vite构建链
      - name: 📦 Install Frontend Dependencies (Vue 3 + Vite)
        run: |
          echo "📦 Installing Chrome Extension build dependencies..."
          cd frontend
          # 确保依赖版本锁定，保证构建一致性
          bun install --frozen-lockfile
          echo "✅ All build dependencies installed"
          
      # 🔨 构建Chrome扩展：生产环境优化构建
      - name: 🔨 Build Chrome Extension (Production)
        run: |
          echo "🔨 Building Chrome Extension for production deployment..."
          cd frontend
          # 设置生产环境变量，启用所有优化
          NODE_ENV=production bun run build:prod
          echo "✅ Chrome Extension built successfully"
          
      # 📊 扩展大小分析：确保符合Chrome Store要求
      - name: 📊 Chrome Extension Size Analysis & Validation
        run: |
          echo "📊 Analyzing Chrome Extension package size..."
          cd dist  # 进入构建输出目录
          
          # 📦 显示详细的文件大小分布
          echo "📦 Extension files size breakdown (Top 20 largest):"
          find . -type f -exec ls -lah {} \; | awk '{print $5 "\t" $9}' | sort -hr | head -20
          
          # 📊 计算总大小 (KB和MB)
          TOTAL_SIZE_KB=$(du -sk . | cut -f1)
          TOTAL_SIZE_MB=$((TOTAL_SIZE_KB / 1024))
          
          echo ""
          echo "📊 Extension Package Summary:"
          echo "   Total Size: ${TOTAL_SIZE_KB}KB (~${TOTAL_SIZE_MB}MB)"
          
          # 🚨 Chrome Web Store大小限制检查
          # Chrome Store限制：20MB (硬限制)
          # 建议大小：<10MB (用户体验最佳)
          # 警告大小：>5MB (开始影响加载速度)
          if [ $TOTAL_SIZE_KB -gt 20480 ]; then
            echo "❌ CRITICAL: Extension exceeds Chrome Store 20MB hard limit!"
            echo "   Chrome Web Store will reject packages >20MB"
            echo "   Current size: ${TOTAL_SIZE_MB}MB"
            exit 1
          elif [ $TOTAL_SIZE_KB -gt 10240 ]; then
            echo "⚠️ WARNING: Extension size exceeds 10MB recommended limit"
            echo "   Consider optimizing assets, removing unused dependencies"
            echo "   Current size: ${TOTAL_SIZE_MB}MB (limit: 10MB)"
          elif [ $TOTAL_SIZE_KB -gt 5120 ]; then
            echo "💡 INFO: Extension size exceeds 5MB"
            echo "   Still acceptable but monitor for future growth"
            echo "   Current size: ${TOTAL_SIZE_MB}MB"
          else
            echo "✅ EXCELLENT: Extension size within optimal range"
            echo "   Current size: ${TOTAL_SIZE_MB}MB (<5MB recommended)"
          fi
          
      - name: 🏪 Chrome Extension Structure Validation
        run: |
          cd dist
          echo "🏪 Validating Chrome Extension structure..."
          
          # 检查必需文件
          required_files=("manifest.json" "background.js")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # 验证manifest.json
          if command -v jq > /dev/null; then
            echo "📝 Validating manifest.json..."
            jq empty manifest.json || { echo "❌ Invalid manifest.json"; exit 1; }
            
            VERSION=$(jq -r '.version' manifest.json)
            NAME=$(jq -r '.name' manifest.json)
            MANIFEST_VERSION=$(jq -r '.manifest_version' manifest.json)
            
            echo "📋 Extension Info:"
            echo "  - Name: $NAME"
            echo "  - Version: $VERSION"
            echo "  - Manifest Version: $MANIFEST_VERSION"
            
            # 检查权限配置
            PERMISSIONS=$(jq -r '.permissions[]?' manifest.json 2>/dev/null | wc -l)
            echo "  - Permissions count: $PERMISSIONS"
            
            echo "✅ manifest.json is valid"
          fi
          
      - name: 📦 Create Chrome Extension Package
        run: |
          cd dist
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ZIP_NAME="chrome-extension-${TIMESTAMP}.zip"
          zip -r "../${ZIP_NAME}" . -x "*.DS_Store" "*.gitkeep"
          echo "📦 Extension package created: $ZIP_NAME"
          echo "CHROME_ZIP_FILE=${ZIP_NAME}" >> $GITHUB_ENV
          
      - name: 📤 Upload Chrome Extension Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-${{ github.sha }}
          path: ${{ env.CHROME_ZIP_FILE }}
          retention-days: 30

  # ===============================
  # ⚡ Serverless后端构建验证
  # ===============================
  serverless-backend-build:
    name: ⚡ Serverless Backend Build & Test
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          bun install --frozen-lockfile
          
      - name: 🔨 Backend Build Test
        run: |
          cd backend
          echo "🔨 Testing backend build..."
          # Bun native项目通常不需要构建，但可以做语法检查
          bun run build
          
      - name: 🚀 Backend Function Test
        run: |
          cd backend
          echo "🚀 Testing backend functionality..."
          
          # 启动服务器进行健康检查
          timeout 30s bun run start &
          SERVER_PID=$!
          
          # 等待服务器启动
          sleep 5
          
          # 健康检查
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Backend server responding correctly"
          else
            echo "⚠️ Backend server not responding (check configuration)"
          fi
          
          # 清理
          kill $SERVER_PID 2>/dev/null || true
          
      - name: 📊 Backend Performance Benchmark
        run: |
          cd backend
          echo "📊 Running backend performance tests..."
          
          # 如果有benchmark脚本就运行
          if grep -q "benchmark" package.json; then
            echo "🏃‍♂️ Running performance benchmarks..."
            timeout 60s bun run benchmark || echo "⚠️ Benchmark timeout or not available"
          else
            echo "ℹ️ No benchmark script found"
          fi
          
      - name: 📋 Serverless Compatibility Check
        run: |
          cd backend
          echo "📋 Checking Vercel/Serverless compatibility..."
          
          # 检查是否有vercel配置
          if [ -f "vercel.json" ]; then
            echo "✅ Found vercel.json configuration"
            cat vercel.json | head -20
          else
            echo "⚠️ No vercel.json found - will use default Vercel settings"
          fi
          
          # 检查main入口文件
          MAIN_FILE=$(jq -r '.main' package.json)
          if [ -f "$MAIN_FILE" ]; then
            echo "✅ Main entry file exists: $MAIN_FILE"
          else
            echo "⚠️ Main entry file not found: $MAIN_FILE"
          fi

  # ===============================
  # 🚀 Chrome扩展部署
  # ===============================
  deploy-chrome-extension:
    name: 🚀 Deploy Chrome Extension
    needs: [chrome-extension-build, serverless-backend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend
          bun install --frozen-lockfile
          
      - name: 🔨 Build Chrome Extension for Release
        run: |
          cd frontend
          NODE_ENV=production bun run build:prod
          
      - name: 📦 Create Release Package
        run: |
          cd dist
          RELEASE_VERSION="v${{ github.run_number }}"
          ZIP_NAME="acuity-bookmarks-${RELEASE_VERSION}.zip"
          zip -r "../${ZIP_NAME}" . -x "*.DS_Store" "*.gitkeep"
          echo "RELEASE_ZIP=${ZIP_NAME}" >> $GITHUB_ENV
          
      - name: 🏪 Deploy to Chrome Web Store
        if: ${{ secrets.CHROME_CLIENT_ID && secrets.CHROME_CLIENT_SECRET }}
        uses: mobilefirstllc/cws-publish@latest
        with:
          action: 'publish'
          client_id: ${{ secrets.CHROME_CLIENT_ID }}
          client_secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh_token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          extension_id: ${{ secrets.CHROME_EXTENSION_ID }}
          zip_file: './${{ env.RELEASE_ZIP }}'
          
      - name: 📝 Create GitHub Release for Chrome Extension
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: chrome-v${{ github.run_number }}
          name: 🔗 Chrome Extension v${{ github.run_number }}
          body: |
            ## 🔗 AcuityBookmarks Chrome Extension Release
            
            ### 📦 Chrome Extension Package
            - **Version**: v${{ github.run_number }}
            - **Build**: ${{ github.sha }}
            - **Release Date**: ${{ github.event.head_commit.timestamp }}
            
            ### 📋 Installation Instructions
            1. Download the attached ZIP file
            2. Extract to local directory
            3. Open Chrome Extensions (chrome://extensions/)
            4. Enable Developer Mode
            5. Click "Load unpacked" and select extracted folder
            
            ### 🔗 Chrome Web Store
            This extension is also available on the Chrome Web Store (pending approval).
            
            ### 📋 Recent Changes
            ${{ github.event.head_commit.message }}
            
          files: ${{ env.RELEASE_ZIP }}
          draft: false
          prerelease: false

  # ===============================
  # ⚡ Serverless后端部署
  # ===============================
  deploy-serverless-backend:
    name: ⚡ Deploy Serverless Backend to Vercel
    needs: [chrome-extension-build, serverless-backend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Bun Runtime
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          bun install --frozen-lockfile
          
      - name: 🔨 Prepare Backend for Deployment
        run: |
          cd backend
          echo "🔨 Preparing backend for Vercel deployment..."
          
          # 如果需要构建步骤，在这里执行
          bun run build
          
          # 确保vercel配置存在
          if [ ! -f "vercel.json" ]; then
            echo "⚠️ Creating default vercel.json..."
            cat > vercel.json << 'EOF'
            {
              "version": 2,
              "builds": [
                {
                  "src": "*.js",
                  "use": "@vercel/node"
                }
              ],
              "routes": [
                {
                  "src": "/(.*)",
                  "dest": "/server-bun-native.js"
                }
              ]
            }
            EOF
          fi
          
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./backend
          
      - name: 📝 Create GitHub Release for Backend
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ github.run_number }}
          name: ⚡ Serverless Backend v${{ github.run_number }}
          body: |
            ## ⚡ AcuityBookmarks Serverless Backend Release
            
            ### 🚀 Deployment Information
            - **Version**: v${{ github.run_number }}
            - **Platform**: Vercel Serverless
            - **Build**: ${{ github.sha }}
            - **Deploy Date**: ${{ github.event.head_commit.timestamp }}
            
            ### 🔧 Backend Services
            - **AI LLM Integration**: Ready for Chrome Extension calls
            - **Network Processing**: Web scraping and data processing
            - **Serverless Functions**: Optimized for Vercel platform
            
            ### 🌐 API Endpoints
            Backend services are deployed and accessible via Vercel URLs.
            
            ### 📋 Recent Changes
            ${{ github.event.head_commit.message }}
            
          draft: false
          prerelease: false

  # ===============================
  # 📢 部署状态通知
  # ===============================
  # ===============================
  # 📢 双端部署状态监控与通知
  # ===============================
  deployment-notification:
    name: 📢 Dual Deployment Status Summary & Notification
    # 🔗 依赖：等待双端部署任务完成 (成功或失败都会执行)
    needs: [deploy-chrome-extension, deploy-serverless-backend]
    runs-on: ubuntu-latest
    # 🎯 执行条件：
    #   - always(): 无论前置任务成功或失败都执行
    #   - main分支：只在主分支部署时生成报告
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      # 📊 生成详细的双端部署状态报告
      - name: 📊 Generate Comprehensive Deployment Report
        run: |
          echo "================================================"
          echo "📊 AcuityBookmarks 双端部署状态报告"
          echo "================================================"
          echo ""
          
          # 📋 基本部署信息
          echo "🔍 部署基本信息:"
          echo "   Commit SHA: ${{ github.sha }}"
          echo "   Branch: ${{ github.ref }}"
          echo "   Trigger Event: ${{ github.event_name }}"
          echo "   Deploy Time: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "   Workflow Run: #${{ github.run_number }}"
          echo ""
          
          # 📊 双端部署状态概览
          echo "🚀 双端部署状态概览:"
          echo "   🔗 Chrome Extension: ${{ needs.deploy-chrome-extension.result }}"
          echo "   ⚡ Serverless Backend: ${{ needs.deploy-serverless-backend.result }}"
          echo ""
          
          # 🎯 获取部署状态用于详细分析
          CHROME_STATUS="${{ needs.deploy-chrome-extension.result }}"
          BACKEND_STATUS="${{ needs.deploy-serverless-backend.result }}"
          
          # 📈 详细状态分析与建议
          echo "🔍 详细状态分析:"
          echo "================================================"
          
          if [ "$CHROME_STATUS" == "success" ] && [ "$BACKEND_STATUS" == "success" ]; then
            echo "✅ 🎉 完全部署成功 (COMPLETE SUCCESS)"
            echo ""
            echo "🎯 部署成果:"
            echo "   ✅ Chrome Extension: 已发布到Chrome Web Store"
            echo "   ✅ Serverless Backend: 已部署到Vercel平台"
            echo "   ✅ API集成: Chrome Extension ↔ Vercel Serverless"
            echo "   ✅ 版本同步: 前后端版本v${{ github.run_number }}已对齐"
            echo ""
            echo "🚀 用户访问路径:"
            echo "   1. Chrome Web Store → 下载扩展"
            echo "   2. Chrome Extension → 调用Vercel API"
            echo "   3. Vercel Serverless → 处理AI LLM + 抓包请求"
            echo ""
            echo "🎉 恭喜！AcuityBookmarks已完全部署并可供用户使用！"
            
          elif [ "$CHROME_STATUS" == "success" ] || [ "$BACKEND_STATUS" == "success" ]; then
            echo "⚠️ 🔄 部分部署成功 (PARTIAL SUCCESS)"
            echo ""
            echo "📊 部署状态详情:"
            echo "   Chrome Extension: $CHROME_STATUS"
            echo "   Serverless Backend: $BACKEND_STATUS"
            echo ""
            echo "🔧 需要手动干预:"
            if [ "$CHROME_STATUS" != "success" ]; then
              echo "   ❌ Chrome Extension部署失败"
              echo "      → 检查Chrome Web Store API配置"
              echo "      → 验证扩展包格式和大小"
              echo "      → 确认Chrome Store开发者账户状态"
            fi
            if [ "$BACKEND_STATUS" != "success" ]; then
              echo "   ❌ Serverless Backend部署失败"
              echo "      → 检查Vercel API Token和权限"
              echo "      → 验证vercel.json配置"
              echo "      → 确认Vercel项目设置"
            fi
            echo ""
            echo "💡 建议操作:"
            echo "   1. 查看失败任务的详细日志"
            echo "   2. 修复配置或代码问题"
            echo "   3. 重新触发部署 (git push 或手动运行)"
            
          else
            echo "❌ 🚨 完全部署失败 (COMPLETE FAILURE)"
            echo ""
            echo "📊 双端部署都失败了:"
            echo "   Chrome Extension: $CHROME_STATUS"
            echo "   Serverless Backend: $BACKEND_STATUS"
            echo ""
            echo "🚨 紧急处理清单:"
            echo "   1. 🔍 检查GitHub Actions日志"
            echo "   2. 🔧 验证所有GitHub Secrets配置"
            echo "   3. 🧪 在本地环境测试构建过程"
            echo "   4. 📋 确认package.json脚本配置"
            echo "   5. 🔐 检查API密钥和权限设置"
            echo ""
            echo "📞 故障排除步骤:"
            echo "   → 运行 'bun run build:prod' 本地测试"
            echo "   → 检查 GitHub Secrets 是否正确配置"
            echo "   → 验证 Chrome Web Store 和 Vercel 账户状态"
            echo "   → 查看失败任务的完整日志输出"
            echo ""
            # 🚨 部署失败时设置非零退出码，标记工作流失败
            exit 1
          fi
          
          echo "================================================"
          echo "📋 部署报告生成完毕"
          echo "📅 报告时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 工作流详情: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "================================================"
