---
alwaysApply: true
---

# AcuityBookmarks 项目规则

用中文回复

## 🔴 工作流规范（最高优先级）

### 1. 文档生成规则
- ❌ **禁止主动生成任何格式类型的文档**（除非用户明确要求）
- ❌ 禁止创建 `.md`、`.txt`、`.doc` 等文档文件
- ✅ 只在用户明确要求时才生成文档

### 2. 代码修改后必须检查
**每次修改代码后，必须立即运行以下命令检查是否产生新错误：**

```bash
bun run typecheck:force    # TypeScript 类型检查
bun run lint:all          # ESLint + Stylelint 检查
```

- ✅ 如果有错误，必须立即修复
- ✅ 确认无错误后才算完成修改

## 📚 必读文档
- **产品文档（最重要）**：`文档/产品文档/AcuityBookmarks-产品文档-v3.0.md`
- 架构变更必须同步更新产品文档

## 🚨 核心架构原则（最高优先级）

### 1. 单向数据流（禁止违反）
```
Chrome API → Background Script → IndexedDB → Pinia Store → Vue Components
     ↑                                                           ↓
     └─────────────── chrome.runtime.sendMessage ────────────────┘
```

**铁律：**
- ✅ IndexedDB 是唯一数据源
- ✅ Background Script 是唯一监听者（`background/bookmarks.ts`）
- ✅ 前端禁止直接访问 Chrome API
- ❌ 禁止前端直接调用 `chrome.bookmarks.*`

### 2. DDD 分层架构（严格执行）
```
presentation/ → application/ → core/ → infrastructure/
```
- ❌ `presentation/` 不能直接访问 `infrastructure/`
- ❌ `core/` 不能依赖 `infrastructure/`

### 3. IndexedDB 管理器（唯一入口）
- 路径：`frontend/src/infrastructure/indexeddb/manager.ts`
- ✅ 所有 IndexedDB 操作必须通过 `indexedDBManager` 实例
- ❌ 禁止直接使用 `indexedDB.open()` 或原生 API

## 💾 存储方案职责划分

| 存储类型 | 生命周期 | 使用场景 |
|---|---|---|
| IndexedDB | 永久 | 书签数据（2万+）、爬取元数据 |
| chrome.storage.local | 永久 | 用户偏好、扩展配置 |
| chrome.storage.session | 会话级 | 临时数据、UI 状态、同步状态 |
| Pinia Store | 页面级 | 高频 UI 状态、计算属性 |

**决策树：**
1. 数据量 > 1000 条？→ IndexedDB
2. 需要浏览器关闭后保留？→ chrome.storage.local
3. 需要跨页面共享但会话结束清除？→ chrome.storage.session
4. 仅当前页面使用且刷新后可重建？→ Pinia Store

## 🔍 重要：搜索 vs 筛选

### ⚠️ 本项目中统一使用"筛选"概念

**为什么不叫"搜索"？**
- ✅ 所有数据都在本地 IndexedDB（2万+ 书签）
- ✅ 不存在网络请求
- ✅ 从已有集合中过滤符合条件的书签
- ✅ 这是"筛选（Filter）"的定义，而非"搜索（Search）"

**术语规范：**
- ✅ 对外（UI、API、文档）：**筛选（Filter）**
- ✅ 对内（技术实现、代码注释）：search/filter 都可以
- ❌ 禁止在 UI 文案中使用"搜索"

**相关组件：**
- `BookmarkFilter` 组件：书签筛选组件
- `useBookmarkFilter` Composable：书签筛选 hook
- `searchAppService`：底层筛选服务（技术术语保留）

## 🛠️ 技术栈规范

### 关键工具
- **Immer**：`updateMap(nodes, draft => {...})`（不可变状态更新）
- **mitt**：`emitEvent('bookmark:created', {...})`（事件总线）
- **VueUse**：优先使用 `useEventListener`、`useDebounceFn`、`useTimeoutFn`
- **Zod**：所有外部数据必须校验

### TypeScript 规范
- ❌ 永久禁止 `any`、`as any`
- ✅ 必须使用 Zod 校验外部数据
- ✅ 必须添加 JSDoc 注释（中文）

### Vue 组件规范
- ✅ 必须使用 `defineOptions({ name: 'ComponentName' })`
- ❌ 禁止组件内直接调用 `chrome.bookmarks.*`
- ❌ 禁止组件内直接调用 `indexedDB.open()`

## ⚠️ 常见错误（禁止！）

### 1. 数据流错误
```typescript
// ❌ 前端直接调用 Chrome API
await chrome.bookmarks.create({ title: '新书签' })

// ✅ 通过 Background Script
await chrome.runtime.sendMessage({ type: 'CREATE_BOOKMARK', title: '新书签' })
```

### 2. 状态更新错误
```typescript
// ❌ 直接修改 Map（Vue 无法检测）
nodes.value.set('123', newNode)

// ✅ 使用 Immer
updateMap(nodes, draft => { draft.set('123', newNode) })
```

### 3. Service Worker 兼容性错误（重要！）

**Background Script 运行在 Service Worker 环境，没有 `window`、`document`、`localStorage`！**

| 正确 ✅ | 错误 ❌ |
|-----|-----|
| `setTimeout()` | `window.setTimeout()` |
| `fetch()` | `window.fetch()` |
| `chrome.storage.*` | `localStorage.*` |
| `ReturnType<typeof setTimeout>` | `number` (类型) |

```typescript
// ❌ 错误
private timer: number | null = null
this.timer = window.setTimeout(() => {...}, 1000)

// ✅ 正确
private timer: ReturnType<typeof setTimeout> | null = null
this.timer = setTimeout(() => {...}, 1000)
```

**受影响文件：**
- `frontend/src/background/**/*.ts`
- `frontend/src/services/**/*.ts`（如 `bookmark-sync-service.ts`）

### 4. IndexedDB 路径错误
```typescript
// ❌ 旧路径
import { indexedDBManager } from '@/utils-legacy/indexeddb-manager'

// ✅ 新路径
import { indexedDBManager } from '@/infrastructure/indexeddb/manager'
```

### 5. 缺少 Zod 校验
```typescript
// ❌ 直接使用外部数据
const bookmarks = await indexedDBManager.getAllBookmarks()

// ✅ 先校验
const validated = BookmarkRecordArraySchema.parse(bookmarks)
```

### 6. 术语错误
```vue
<!-- ❌ UI 中使用"搜索" -->
<p>搜索书签...</p>
<Button>搜索</Button>

<!-- ✅ 使用"筛选" -->
<p>筛选书签...</p>
<Button>筛选</Button>
```

## ⚡ 性能要求

**目标：支持 2 万书签流畅操作**

- ✅ 虚拟滚动：使用 `@tanstack/vue-virtual`
- ✅ 批量操作：IndexedDB 分批（2000/批）
- ✅ 缓存树结构：`flattenTreeToMap` 转 Map（O(1) 查找）
- ❌ 禁止全树递归遍历

## ⏱️ 长耗时任务设计原则

### 核心哲学
**真实进度 > 假进度 > 无反馈**

### 业务分级
- 🔴 **核心业务**（书签同步、导入）：同步执行 + 真实进度反馈
  - 必须显示：阶段指示器 + 百分比 + 当前/总数 + 预计剩余时间
  - 分批写入：每批后 `setTimeout(0)` 让出主线程
  
- 🟡 **辅助业务**（爬虫、AI 标签、健康扫描）：Worker 异步 + 队列调度
  - 优先级排序 + 并发控制 + 可暂停/取消

**禁止：**
- ❌ 核心业务放到 Worker（数据不完整时无法使用）
- ❌ 只有转圈圈，没有百分比和预计时间
- ❌ 假进度条（不基于真实数据）

## 🔧 工具命令

```bash
bun run typecheck:force          # 类型检查（提交前必须）
bun run lint:fix:enhanced        # 代码质量检查
bun run format                   # 格式化
bun run build:hot                # 热构建
```

## 🚀 核心要点总结

**记住这 5 点，避免 95% 的错误：**

1. **单向数据流**：Chrome API → Background → IndexedDB → UI
2. **IndexedDB 唯一数据源**：所有 UI 从 IndexedDB 读取
3. **禁止前端直接访问 Chrome API**：必须通过 Background Script
4. **Service Worker 兼容**：禁止使用 `window.*`、`document.*`、`localStorage.*`
5. **术语规范**：UI 中使用"筛选"而非"搜索"

---

_最后更新：2025-10-27_

